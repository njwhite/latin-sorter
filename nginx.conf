
worker_processes auto;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_static on;
    gzip_proxied any;
    gzip_comp_level 1;
    gzip_buffers 16 8k;
    gzip_min_length 256;
    gzip_types text/plain text/css application/javascript text/javascript;

    log_format timed_combined '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $pipe $connection_requests $gzip_ratio';
    access_log /dev/stdout timed_combined;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        return 301 https://$host$request_uri;  
}  
   server {  
        listen 443 ssl http2 default_server;  
        listen [::]:443 ssl http2 default_server;  
      
        ssl_certificate /etc/letsencrypt/live/derigenda.co.uk/fullchain.pem;  
        ssl_certificate_key /etc/letsencrypt/live/derigenda.co.uk/privkey.pem;  
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  
        ssl_prefer_server_ciphers on;  
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";  
        ssl_ecdh_curve secp384r1;  
        ssl_session_cache shared:SSL:10m;  
        ssl_session_tickets off;  
        ssl_stapling on;  
        ssl_stapling_verify on;  

        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        location ~ ^/words/([^/]+)$ {
            default_type 'text/plain';
            add_header Cache-Control immutable;

            content_by_lua_block {
                local file = assert(io.popen('/home/whitakers-words-master/bin/words ' .. ngx.var[1], 'r'))
                local output = file:read('*all')
                file:close()
                ngx.say(output)
            }
        }

        location / {
            root   html;
            index  sorter.htm;
            rewrite ^(/.*)\.htm(\?.*)?$ $1$2 permanent;
            try_files $uri.htm $uri/ $uri =404;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
